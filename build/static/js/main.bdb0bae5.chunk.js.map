{"version":3,"sources":["api/reward.js","App.js","config/site.config.js","api/index.js","reportWebVitals.js","index.js"],"names":["getTotalReward","myweb3","a","contractInstance","getContractInstance","console","log","methods","totalDividends","call","res","Promise","resolve","reject","getUserReward","account","getUnpaidEarnings","claim","address","eth","getGasPrice","claimDividend","send","from","detectEthereumNetwork","callback","window","ethereum","request","method","then","cId","parseInt","chainId","params","chainHex","App","useState","myWeb3","setMyWeb3","setAccount","total","setTotal","userReward","setUserReward","pendingReward","setPendingReward","connect","web3_modal","provider","on","cid","off","toggleModal","web3","Web3","getAccounts","accounts","disconnect","offWeb3Modal","useEffect","_total","_userReward","className","onClick","eval","toFixed","contactAddress","http","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","Web3Modal","network","cacheProvider","Contract","ABI","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdb0bae5.chunk.js","sourcesContent":["import { getContractInstance,   getWeb3 } from './index'\r\n\r\nasync function getTotalReward(myweb3) {\r\n  try {\r\n    const contractInstance = getContractInstance(myweb3)\r\n    console.log('contract instance', contractInstance);\r\n\r\n    // let decimals = await contractInstance.methods.decimals().call();\r\n    let res = await contractInstance.methods.totalDividends().call();\r\n    // res = res / Math.pow(10, decimals);\r\n    return Promise.resolve(res);\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\nasync function getUserReward(myweb3, account) {\r\n  try {\r\n    const contractInstance = getContractInstance(myweb3);\r\n    let res = await contractInstance.methods.getUnpaidEarnings(account).call();\r\n\r\n    return Promise.resolve(res);\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\nasync function getPendingReward(myweb3, account) {\r\n  try {\r\n    const contractInstance = getContractInstance(myweb3);\r\n    // let res = await contractInstance.methods.shares(account).call();\r\n\r\n    // return Promise.resolve(res);\r\n  } catch (error) {\r\n    // return Promise.reject(error);\r\n  }\r\n}\r\n\r\nasync function claim(myweb3, address) {\r\n  try {\r\n    console.log('claim', address);\r\n    let from = address;\r\n    let gasPrice = await myweb3.eth.getGasPrice();\r\n\r\n    const contractInstance = getContractInstance(myweb3);\r\n    // let param = {\r\n    //   from: from,\r\n    //   to: '0x12896bf73bc456aabcad48d0c5662199def840f8',\r\n    //   gasPrice: gasPrice,\r\n    //   gas: '9000000'\r\n    //   // value: 10000000000000\r\n    // }\r\n    let res = await contractInstance.methods.claimDividend().send({from:address});\r\n    console.log(res);\r\n    return Promise.resolve(res);\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\nexport {\r\n  getTotalReward,\r\n  getUserReward,\r\n  getPendingReward,\r\n  claim,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport { getTotalReward, getUserReward, getPendingReward, claim } from \"./api/reward\";\n// import { connectToWallet, offWeb3Modal } from \"./api\";\nimport { chainHex, chainId } from \"./config/site.config\";\nimport { offWeb3Modal, web3_modal } from \"./api\";\n\nconst detectEthereumNetwork = (callback) => {\n  window.ethereum.request({ method: 'eth_chainId' }).then(async (cId) => {\n      if (parseInt(cId) != chainId) { // bsc testnet\n        window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: chainHex }], // chainId must be in hexadecimal numbers\n        }).then(()=>{\n            return callback();\n        })\n      }else{\n          return callback();\n      }\n  });\n}\n\n\nfunction App() {\n  const [myWeb3, setMyWeb3] = useState(null);\n  const [account, setAccount] = useState('');\n  const [total, setTotal] = useState(0);\n  const [userReward, setUserReward] = useState(0)\n  const [pendingReward, setPendingReward] = useState(0)\n\n  const connect = async () => {\n    if (account !== '') {\n      setAccount('');\n      setMyWeb3(null);\n    }\n    else {\n      detectEthereumNetwork(async () => {\n        const provider = await web3_modal.connect();\n        provider.on('chainChanged', async (cid) => {\n          if (parseInt(cid) !== chainId) {\n            await web3_modal.off();\n            return null;\n          }\n        })\n        await web3_modal.toggleModal();\n        // provider.\n        // regular web3 provider methods\n        const web3 = new Web3(provider);\n        if(web3){\n          setMyWeb3(web3);\n          const accounts = await web3.eth.getAccounts();\n          setAccount(accounts[0]);\n        }\n      });\n    }\n  }\n\n  const disconnect = async () => {\n    offWeb3Modal();    \n  }\n\n  useEffect(() => {\n    (async () => {\n      if(myWeb3){\n        const _total = await getTotalReward(myWeb3)\n        console.log('total', total);\n        setTotal(_total)\n        if (account !== '') {\n          const _userReward = await getUserReward(myWeb3, account)\n          console.log('user reward', _userReward);\n          if(_userReward){\n            setUserReward(_userReward)\n            setPendingReward(_userReward);\n          }\n        }\n        // const _pendingReward = await getPendingReward(myWeb3, account)\n        // console.log('pending reward', _pendingReward);\n        // setPendingReward(_pendingReward)\n      }else{\n        setTotal(0);\n        setUserReward(0);\n        setPendingReward(0);\n      }\n    })()\n  }, [account, myWeb3])\n  return (\n    <div className=\"main\">\n      <button className=\"my-btn connect-btn\" onClick={() => connect()}>\n        <div className=\"connect-btn-text\">\n          {account === '' ? 'Connect to metamask' : account}\n        </div>\n      </button>\n      <div className=\"header\">Dashboard</div>\n      <div className=\"row board\">\n        <div className=\"col-lg-6 col-sm-12\">\n          <div className=\"item\">\n            <div className=\"item-header\">Total $USDC Rewards</div>\n            <div className=\"item-body\">\n              <div className=\"item-name\">$USDC</div>\n              <div className=\"item-value\">{ eval(parseInt(total)/1e15).toFixed(3)  }</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6 col-sm-12\">\n          <div className=\"item\">\n            <div className=\"item-header\">Your Total $USDC Rewards</div>\n            <div className=\"item-body\">\n              <div className=\"item-name\">$USDC</div>\n              <div className=\"item-value\">{ userReward }</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-12 col-sm-12\">\n          <div className=\"item\">\n            <div className=\"item-header\">Pending $USDC Rewards</div>\n            <div className=\"item-body\">\n              <div className=\"item-name\">$USDC</div>\n              <div className=\"item-value\">{ pendingReward }</div>\n              <div className=\"d-flex justify-content-center\">\n                <button className=\"my-btn\" onClick={() => claim(myWeb3, account)}>Claim Now</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const contactAddress = \"0x12896bF73BC456AaBCAD48D0c5662199deF840f8\";\r\nconst http = \"https://api.avax.network/ext/bc/C/rpc\";\r\nconst chainId = 43114;\r\nconst chainHex = '0xA86A';\r\nexport {\r\n  contactAddress,\r\n  http,\r\n  chainId,\r\n  chainHex\r\n};\r\n","import { chainHex, chainId, contactAddress, http } from '../config/site.config'\r\nimport ABI from '../data/sub.token.json'\r\nimport Web3 from 'web3';\r\nimport Web3Modal from 'web3modal';\r\nimport WalletConnectProvider from '@walletconnect/web3-provider';\r\n\r\n\r\nconst providerOptions = {\r\n  walletconnect: {\r\n    package: WalletConnectProvider,\r\n    options: {\r\n      rpc: {\r\n        [chainId]: http\r\n      },\r\n      chainId: chainId\r\n    }\r\n  }\r\n}\r\n\r\nconst web3_modal = new Web3Modal({\r\n  network: \"testnet\", // optional\r\n  cacheProvider: true, // optional,\r\n  providerOptions\r\n})\r\n\r\nconst detectEthereumNetwork = (callback) => {\r\n  window.ethereum.request({ method: 'eth_chainId' }).then(async (cId) => {\r\n    if (parseInt(cId) != chainId) { // bsc testnet\r\n      window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: chainHex }], // chainId must be in hexadecimal numbers\r\n      }).then(() => {\r\n        return callback();\r\n      })\r\n    } else {\r\n      return callback();\r\n    }\r\n  });\r\n}\r\n\r\nconst getContractInstance = (web3) => {\r\n  // const web3 = new Web3(new Web3.providers.HttpProvider(http));\r\n  let res = new web3.eth.Contract(ABI, contactAddress);\r\n  return res\r\n}\r\n\r\n// const getWeb3 = () => {\r\n//   const web3 = new Web3(new Web3.providers.HttpProvider(http));\r\n//   return web3\r\n// }\r\n\r\nconst connectToWallet = () => {\r\n  detectEthereumNetwork(async () => {\r\n    const provider = await web3_modal.connect();\r\n    provider.on('chainChanged', async (cid) => {\r\n      if (parseInt(cid) !== chainId) {\r\n        await web3_modal.off();\r\n        return null;\r\n        // dispatch({ type: actionTypes.SET_ACCOUNT, account: {...config.initAccount}})\r\n      }\r\n    })\r\n    await web3_modal.toggleModal();\r\n    // provider.\r\n    // regular web3 provider methods\r\n    const newWeb3 = new Web3(provider);\r\n    console.log(newWeb3);\r\n    return newWeb3;\r\n    // const accounts = await newWeb3.eth.getAccounts();\r\n    // const balance = await newWeb3.eth.getBalance(accounts[0])/Math.pow(10, 18);\r\n    // this.setState({address: accounts[0], balance: balance});\r\n    // dispatch({ type: actionTypes.SET_ACCOUNT, account: {...config.initAccount, address: accounts[0], balance: balance}});\r\n    // dispatch({ type: actionTypes.SET_WEB3INST, web3Inst: newWeb3});\r\n  });\r\n};\r\n\r\nconst offWeb3Modal = () => {\r\n  return Web3Modal.off();\r\n}\r\n\r\nexport {\r\n  getContractInstance,\r\n  // getWeb3,\r\n  // connectToWallet,\r\n  offWeb3Modal,\r\n  // detectEthereumNetwork\r\n  web3_modal\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}